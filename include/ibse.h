//
//
#include <memory>
#include <vector>
#include <eigen3/Eigen/Core>
#include <eigen3/Eigen/Geometry>
#include <ibse_common.h>


namespace ibse
{


class Impl;

class IBSE
{
  public:
   IBSE();
   ~IBSE();

   // Clears old visual data, and uses the passed-in values.  The 'position' and
   // 'rotation' samples must be taken at the same time; e.g. the corresponding
   // entry in 'time'
   ErrorCode setVisualData(const std::vector<double>& time,
                           const std::vector<Eigen::Vector3d>& position,
                           const std::vector<Eigen::Quaterniond>& rotation);

   // Clears old IMU data, and uses the passed-in values.  The linear accelerations
   // are sampled at the times in 'accelerometer time', and the angular velocities
   // are sampled at the times in 'gyroscope_time'
   ErrorCode setInertialData(const std::vector<double>& accelerometer_time,
                             const std::vector<Eigen::Vector3d>& linear_acceleration,
                             const std::vector<double>& gyroscope_time,
                             const std::vector<Eigen::Vector3d>& angular_velocity);

   // Performs the intial estimate of the alignment of the visual and inertial data.
   // This produces an initial estimate of the scale, bias and gravity vector. However,
   // this estimate is unconstrained, so gravity may be larger than 9.8 m/s^2
   ErrorCode initialAlignmentEstimation();

   // Perform a constrained, non-linear optimiation to refine the scale, bias and
   // gravity estimates generated by 'initialAlignmentEstimation.'  'fMax' is the
   // upper limit for the frequencies used in the optimization objective function.
   // If a larger number is used, higher frequencies will be involved in the 
   // optimization, and the optimization itself will be slower and require more
   // ierations.  We use 1.2 Hz as the default.
   ErrorCode estimateScale(double& scale, Eigen::Vector3d& g, Eigen::Vector3d& bias,
                           double fMax = 1.2);

  private:
   std::unique_ptr<Impl> _impl;
};


}; // namespace ibse
