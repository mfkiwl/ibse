//
//
#include <vector>
#include <eigen3/Eigen/Core>
#include <eigen3/Eigen/Geometry>
#include <ibse_common.h>


namespace ibse
{


class Impl
{
  public:

   enum class InternalState
   {
      NOT_STARTED,
      DATA_SET,
      INITIAL_ALIGNMENT,
      SCALE_ESTIMATED,
   };

   ErrorCode setVisualData(const std::vector<double>& time,
                           const std::vector<Eigen::Vector3d>& position,
                           const std::vector<Eigen::Quaterniond>& rotation);

   ErrorCode setInertialData(const std::vector<double>& accelerometer_time,
                             const std::vector<Eigen::Vector3d>& linear_acceleration,
                             const std::vector<double>& gyroscope_time,
                             const std::vector<Eigen::Vector3d>& angular_velocity);

   ErrorCode initialAlignmentEstimation();

   ErrorCode estimateScale(double& scale, Eigen::Vector3d& g, Eigen::Vector3d& bias,
                           double fMax);


  private:
   InternalState                _state;

   // generated by setVisualData
   std::vector<double>          _visTime;
   double                       _visDt;
   std::vector<Eigen::Vector3d> _visPosition;
   Eigen::ArrayXXd              _visQuat;

   // generated by setInertialData
   std::vector<double>          _imuTime;
   Eigen::ArrayXXd              _imuAccleration;
   Eigen::ArrayXXd              _imuAngVel;
   
   // generated by initialAlignmentEstimation
   Eigen::Matrix3d              _Rs;
   Eigen::MatrixXd              _A;
   Eigen::MatrixXd              _b;
   double                       _scale0;
   Eigen::Vector3d              _g0;
   Eigen::Vector3d              _bias0;
   std::vector<double>          _alignTime;
};


}; // namespace ibse
