#include <ibse_testing.h>
#include <ibse_internal.h>
#include <iostream>

int
main()
{
   const size_t N = 10;
   Eigen::ArrayXXd accVis(N,3);
   accVis << -0.662419945981779, 1.824101295842961, 2.896776974020415,
      -0.662431489522616, 1.824321166807774, 2.897104972439537,
      -0.661824708158484, 1.823812717089266, 2.896018841572308,
      -0.659867235362322, 1.820807777017613, 2.890165512356016,
      -0.656868141629438, 1.815861715760839, 2.879995505209227,
      -0.653567029120227, 1.812221827277211, 2.868579315074893,
      -0.650734783670111, 1.810821083174493, 2.860134199320156,
      -0.648676785506472, 1.810427285247322, 2.855654089336448,
      -0.647659382042185, 1.810439295623441, 2.854072564870451,
      -0.647493579432640, 1.810456828478497, 2.853854841143328;

   Eigen::ArrayXXd qtVis(N,4);
   qtVis << 0.916236151399, 0.35159231301, -0.187771910834, -0.040444463778,
       0.91604001759, 0.3519780633, -0.188019949241, -0.040379805248,
       0.912912607316, 0.356835900165, -0.19412773405, -0.039661104949,
       0.912502506331, 0.357697529929, -0.194494516663, -0.039541443313,
       0.912539713466, 0.357521889296, -0.194623491600, -0.039636568069,
       0.912263305875, 0.358071567372, -0.194972059328, -0.039324005308,
       0.912462937896, 0.357605813883, -0.194920706519, -0.039183235436,
       0.912593525183, 0.357129353766, -0.195223618935, -0.038979859353,
       0.912645235653, 0.356866460393, -0.195488491318, -0.038849553816,
       0.912766442526, 0.356542129926, -0.195536453105, -0.038738690857;
   
   const size_t M = 31;
   Eigen::ArrayXXd accImu(M,3);
   accImu << 7.417240000000000, 0.191540000000000, 6.131550000000000,
      7.376540000000000, 0.189140000000000, 6.100430000000000,
      7.345410000000000, 0.148440000000000, 5.923250000000000,
      7.335830000000000, 0.148440000000000, 5.839460000000000,
      7.345410000000000, 0.083800000000000, 5.674260000000000,
      7.304710000000000, 0.112530000000000, 5.750870000000000,
      7.366960000000000, 0.086190000000000, 5.837060000000000,
      7.417240000000000, 0.112530000000000, 5.894520000000000,
      7.407660000000000, 0.129290000000000, 5.865790000000000,
      7.378930000000000, 0.107740000000000, 5.805940000000000,
      7.407660000000000, 0.067040000000000, 5.750870000000000,
      7.412450000000000, 0.043100000000000, 5.738900000000000,
      7.477090000000000, 0.023940000000000, 5.906500000000000,
      7.429210000000000, 0.057460000000000, 5.975930000000000,
      7.462730000000000, 0.107740000000000, 6.093240000000000,
      7.424420000000000, 0.045490000000000, 6.100430000000000,
      7.414840000000000, 0.119710000000000, 6.138730000000000,
      7.438780000000000, 0.114920000000000, 6.086060000000000,
      7.405270000000000, 0.083800000000000, 5.906500000000000,
      7.457940000000000, 0.143650000000000, 5.683840000000000,
      7.426810000000000, 0.196320000000000, 5.583280000000000,
      7.417240000000000, 0.184350000000000, 5.683840000000000,
      7.381320000000000, 0.213080000000000, 5.691020000000000,
      7.326260000000000, 0.117320000000000, 5.865790000000000,
      7.311890000000000, 0.086190000000000, 5.983110000000000,
      7.347810000000000, 0.064640000000000, 5.954380000000000,
      7.364560000000000, 0.062250000000000, 5.856220000000000,
      7.417240000000000, 0.071830000000000, 5.671860000000000,
      7.424420000000000, 0.071830000000000, 5.856220000000000,
      7.386110000000000, 0.040700000000000, 5.992690000000000,
      7.386110000000000, 0.033520000000000, 5.956770000000000;

   // Outputs
   Eigen::MatrixXd A(3*N, 7);
   Eigen::MatrixXd b(3*N, 1);
   double          scale;
   Eigen::Vector3d g;
   Eigen::Vector3d bias;
   ibse::initializeEstimates(accVis, qtVis, accImu, A, b, scale, g, bias);

   std::cout << "Initial estimates:" << std::endl;
   std::cout << " scale = " << scale << std::endl;
   std::cout << " gravity = " << g << std::endl;
   std::cout << " bias = " << bias << std::endl;

   // Using larger episolons, since we use a different linear solver
   //  than matlab
   APX_EQ_EPS(scale, 2.3706, 0.001);

   APX_EQ_EPS(g.x(), 23.237, 0.001); APX_EQ_EPS(g.y(), -29.823, 0.001);
   APX_EQ_EPS(g.z(), 20.817, 0.001);

   APX_EQ_EPS(bias.x(), -6.5186, 0.001); APX_EQ_EPS(bias.y(), 36.0928, 0.001);
   APX_EQ_EPS(bias.z(), -2.6113, 0.001);
}


