#include <ibse_testing.h>
#include <ibse_internal.h>
#include <iostream>

int
main()
{
   using namespace ibse;

   const size_t N = 5;

   Eigen::MatrixXd angVis(N, 3);
   angVis << -0.024016965262100, 0.018148138568552, -0.002192395831076,
      -0.024030645539337, 0.018158475909864, -0.002193644639258,
      -0.119335461093448, 0.144669227895364,  0.012616680931534,
      -0.161711842253799, 0.199585281901811,  0.018720541141755,
      -0.137702361813770, 0.161779107838781,  0.012836901019343;
   
   Eigen::MatrixXd angImu(N, 3);
   angImu << -0.005030000000000, 0.083020000000000, -0.020570000000000,
      -0.006093333333333, 0.053906666666667, -0.015956666666667,
      -0.010992000000000, 0.035088000000000, -0.009494000000000,
      -0.014461428571429, 0.035848571428571, -0.005050000000000,
      -0.014376666666667, 0.037927777777778, -0.002936666666667;

   std::vector<double> times = {
      0,
      0.009997499999997,
      0.019992166999998,
      0.030009583000002,
      0.040078082999997};

   double td = -0.118033988749895;

   Eigen::Matrix3d Rs;
   Eigen::MatrixXd bias(1,3);
   double f;
   solveClosedForm(angVis, angImu, times, td, Rs, bias, f);
      
   // Should be
   //  Rs:  -0.030364   0.979783   0.197743
   //       -0.297793  -0.197718   0.933931
   //        0.954148  -0.0305286  0.297776
   //
   // bias:  0.000752875 0.0374212 -0.042859
   // f: 0.0019709
   //
   // NB: Differs from Matlab output, due to different SVD implementations

   APX_EQ(Rs(0,0), -0.030364); APX_EQ(Rs(0,1), 0.979783); APX_EQ(Rs(0,2), 0.197743);
   APX_EQ(Rs(1,0), -0.297793); APX_EQ(Rs(1,1), -0.197718); APX_EQ(Rs(1,2), 0.933931);
   APX_EQ(Rs(2,0),  0.954148); APX_EQ(Rs(2,1), -0.0305286); APX_EQ(Rs(2,2), 0.297776);

   APX_EQ(bias(0,0), 0.000752875);APX_EQ(bias(0,1), 0.0374212); APX_EQ(bias(0,2), -0.042859);

   APX_EQ(f, 0.0019709);
}


